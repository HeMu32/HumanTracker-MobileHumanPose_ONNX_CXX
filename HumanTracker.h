#ifndef POSE_DETECTOR_H
#define POSE_DETECTOR_H

#include <opencv2/opencv.hpp>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <chrono>
#include <vector>
#include <string>

#include "yolo_fast.h"
#include "mobileHumanPose.h"

class HumanTracker
{
public:
    HumanTracker(const std::string& poseModelPath, const std::string& yoloModelPath);
    ~HumanTracker();
    
    /// @brief Initialize yolo and optical flow therad
    void initThreads();
    
    /// @brief          Perform tracking estimation, in a sequence of consistent pictures. 
    ///                 Previous frame kept in the class instance to provide consistent tracking.
    /// @param image    New frame in the sequence.
    /// @return         0 for normal result,
    ///                 1 for yolo fails and the new bound box is generated by optical flow and momentumn,
    ///                 or < 0 if an error is encountered.
    int estimate(const cv::Mat& image);
    
private:
    // 模型
    MobileHumanPose pose_estimator;
    yolo_fast       yolo_model;

    // Momentumn of human detection box
    int momentum[2] = {0, 0};

    // 光流追踪相关参数
    std::vector<uchar> status;
    std::vector<float> err;

    // Indicator of "no frame has yet been detected", thus no info
    // of previous frame available. Initialized to be true.
    bool flagFirstFrame = true;

    // Keep info of previous picture to preform optical flow estimation
    cv::Mat     PrevFrame;
    // Bound box (by yolo) on the previous frame. xyxy.
    cv::Vec4i   PrevBox;
    // This center is the weighted center of the person, not the center of the box!!
    int         xPrevCenter;
    int         yPrevCenter;
    // Indication box for previous picture, xyxy, for visualization and optical flow tracking
    cv::Vec4i   PrevIndiBox;
    
    // Virables for sync. with yoloDetectionThread()
    std::mutex mtxYolo;
    std::condition_variable condVarYolo;
    bool detection_done;
    cv::Mat thread_image;
    std::vector<cv::Vec4i> thread_boxes;
    std::thread* yolo_thread;
    bool thread_running;
    
    // YOLO检测线程函数
    void yoloDetectionThread();
    
    private:
        // 计算光流
        std::pair<int, int> calculateOpticalFlow(const cv::Mat& prevGray, const cv::Mat& currGray, 
                                                const cv::Vec4i& box, const cv::Mat& visualImage);
        
        // 处理光流结果
        std::pair<int, int> processOpticalFlowResults(
            const std::vector<cv::Point2f>& prevPoints, 
            const std::vector<cv::Point2f>& nextPoints,
            const std::vector<uchar>& status,
            const cv::Mat& visualImage);
};

#endif // POSE_DETECTOR_H